<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0.3">
<procedure name="main">
<interface/>
<body>
<c></c>
<l>dev_close_window()</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>dev_update_on()</l>
<c></c>
<c>*** Input the image</c>
<l>ImageFolderPath := 'C:/Users/GothicLolitaSama/Desktop/IC_Substrate_Image/Pinhole/TrueDefects_12SEP18/True/Reverse Metal'</l>
<c></c>
<l>InputImagePath[0] := ImageFolderPath + '/0STEP#1/Crop image and crop hobj'   + '/#1_PINHOLE_01_Index0_Crop.tif'</l>
<l>RefImagePath[0]   := ImageFolderPath + '/0STEP#1/Background Image wo defect' + '/#1_PINHOLE_01_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[1] := ImageFolderPath + '/0STEP#100/Crop image and crop hobj'   + '/#100_PINHOLE_01_Index0_Crop.tif'</l>
<l>RefImagePath[1]   := ImageFolderPath + '/0STEP#100/Background Image wo defect' + '/#100_PINHOLE_01_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[2] := ImageFolderPath + '/0STEP#100/Crop image and crop hobj'   + '/#100_PINHOLE_01_Index1_Crop.tif'</l>
<l>RefImagePath[2]   := ImageFolderPath + '/0STEP#100/Background Image wo defect' + '/#100_PINHOLE_01_Index1_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[3] := ImageFolderPath + '/0STEP#105/Crop image and crop hobj'   + '/#105_PINHOLE_01_Index0_Crop.tif'</l>
<l>RefImagePath[3]   := ImageFolderPath + '/0STEP#105/Background Image wo defect' + '/#105_PINHOLE_01_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[4] := ImageFolderPath + '/0STEP#27/Crop image and crop hobj'   + '/#27_PINHOLE_02_Index0_Crop.tif'</l>
<l>RefImagePath[4]   := ImageFolderPath + '/0STEP#27/Background Image wo defect' + '/#27_PINHOLE_02_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[5] := ImageFolderPath + '/0STEP#11/Crop image and crop hobj'   + '/#11_PINHOLE_01_Index0_Crop.tif'</l>
<l>RefImagePath[5]   := ImageFolderPath + '/0STEP#11/Background Image wo defect' + '/#11_PINHOLE_01_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[6] := ImageFolderPath + '/0STEP#121/Crop image and crop hobj'   + '/#121_PINHOLE_01_Index0_Crop.tif'</l>
<l>RefImagePath[6]   := ImageFolderPath + '/0STEP#121/Background Image wo defect' + '/#121_PINHOLE_01_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[7] := ImageFolderPath + '/0STEP#121/Crop image and crop hobj'   + '/#121_PINHOLE_02_Index0_Crop.tif'</l>
<l>RefImagePath[7]   := ImageFolderPath + '/0STEP#121/Background Image wo defect' + '/#121_PINHOLE_02_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[8] := ImageFolderPath + '/0STEP#40/Crop image and crop hobj'   + '/#40_PINHOLE_01_Index0_Crop.tif'</l>
<l>RefImagePath[8]   := ImageFolderPath + '/0STEP#40/Background Image wo defect' + '/#40_PINHOLE_01_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[9] := ImageFolderPath + '/0STEP#112/Crop image and crop hobj'   + '/#112_PINHOLE_01_Index0_Crop.tif'</l>
<l>RefImagePath[9]   := ImageFolderPath + '/0STEP#112/Background Image wo defect' + '/#112_PINHOLE_01_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[10] := ImageFolderPath + '/0STEP#22/Crop image and crop hobj'   + '/#22_PINHOLE_01_Index0_Crop.tif'</l>
<l>RefImagePath[10]   := ImageFolderPath + '/0STEP#22/Background Image wo defect' + '/#22_PINHOLE_01_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>InputImagePath[11] := ImageFolderPath + '/0STEP#37/Crop image and crop hobj'   + '/#37_PINHOLE_01_Index0_Crop.tif'</l>
<l>RefImagePath[11]   := ImageFolderPath + '/0STEP#37/Background Image wo defect' + '/#37_PINHOLE_01_Index0_CropImageWoDefect.tif'</l>
<c></c>
<l>SelectedImageIndex := 11</l>
<l>read_image (InputImage, InputImagePath[SelectedImageIndex])</l>
<l>read_image (RefImage,   RefImagePath[SelectedImageIndex])</l>
<l>* RectPinholeImagePath_RefImage   := 'C:/Users/GothicLolitaSama/Desktop/Pinhole_referenceImage'</l>
<l>* RectPinholeImagePath_InputImage := 'C:/Users/GothicLolitaSama/Desktop/Pinhole_defectImage'</l>
<l>* read_image (RefImage, RectPinholeImagePath_RefImage)</l>
<l>* read_image (InputImage,   RectPinholeImagePath_InputImage)</l>
<c></c>
<c>********************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c>*** Procedure   : Locate the main "Bonding pad"</c>
<c>*** Description : To extract the region of main Bonding pad before searching the defect on that region later</c>
<c></c>
<c>* Smooth reference image &amp; gray opening algorithm</c>
<l>smooth_image (RefImage, RefImage_Smooth, 'deriche2', 0.8)</l>
<l>gray_opening_shape (RefImage_Smooth, RefImage_OpeningShape, 13, 13, 'octagon')</l>
<c></c>
<c>* Edge extraction </c>
<l>sobel_amp (RefImage_OpeningShape, EdgeAmplitude_OpeningShape, 'thin_max_abs', 9)</l>
<l>emphasize (EdgeAmplitude_OpeningShape, EdgeAmplitude_OpeningShape, 9, 9, 1.0)</l>
<l>threshold (EdgeAmplitude_OpeningShape, EdgesRegion_OpeningShape, 35, 255)</l>
<l>close_edges (EdgesRegion_OpeningShape, EdgeAmplitude_OpeningShape, EdgesExtendedRegion_OpeningShape, 10)</l>
<l>dilation_circle (EdgesExtendedRegion_OpeningShape, EdgesExtendedRegion_OpeningShape, 3.5)</l>
<c></c>
<c>* Try to fill up the edge image, Edge of pinhole will be filled up as the pinhole region in this process</c>
<l>fill_up (EdgesExtendedRegion_OpeningShape, RegionFillUp)</l>
<c></c>
<c>* Search for the region with maximum area as the pinhole region of reference image</c>
<l>connection (RegionFillUp, ConnectedRegions)</l>
<l>count_obj  (ConnectedRegions, obj_count)</l>
<l>area_max := 0</l>
<l>maximum_area_region_index := 1</l>
<l>for i := 1 to obj_count by 1</l>
<l>    select_obj  (ConnectedRegions, SelectedObj, i)</l>
<l>    area_center (SelectedObj, area, r, c)</l>
<l>    if (area &gt; area_max)</l>
<l>        maximum_area_region_index := i</l>
<l>        area_max := area</l>
<l>    endif</l>
<l>endfor</l>
<l>select_obj  (ConnectedRegions, SelectedObj_MaxArea, maximum_area_region_index)</l>
<l>gen_empty_region (BondingPadRegion_RefImage)</l>
<l>BondingPadRegion_RefImage := SelectedObj_MaxArea</l>
<c></c>
<l>dilation_circle (BondingPadRegion_RefImage, DilationBondingPadRegion_RefImage, 2)</l>
<l>* stop()</l>
<c></c>
<c>********************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c>*** Procedure   : Generate shape model for bonding pad detection using reference image</c>
<c></c>
<l>reduce_domain (RefImage, DilationBondingPadRegion_RefImage, DilationBondingPadImage_RefImage)</l>
<l>mean_image (DilationBondingPadImage_RefImage, ImageMean, 5, 5)</l>
<l>create_shape_model (ImageMean, 'auto', -0.39, 0.79, 'auto', 'auto', 'use_polarity', 'auto', 'auto', ModelID)</l>
<l>get_shape_model_contours (ModelContours_Pinhole, ModelID, 1)</l>
<l>* stop()</l>
<c></c>
<c>********************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c>*** Procedure   : Search for bonding pad's area in defect image</c>
<c></c>
<c>* find the pinhole region in defect image using model matching</c>
<l>NumberOfDetectedObj := -1</l>
<l>MinScore := 0.5</l>
<l>while ((NumberOfDetectedObj &lt; 1) and (MinScore &gt; 0.01))</l>
<l>    find_shape_model (InputImage, ModelID, 0, 1.57, MinScore, 0, 0.5, 'least_squares_high', 0, 0, Row_ModelMatching, Column_ModelMatching, Angle_ModelMatching, Score)</l>
<l>    MinScore := MinScore - 0.24</l>
<l>    NumberOfDetectedObj := |Score|</l>
<l>endwhile</l>
<c></c>
<c>* if detected object is founded more than one object. Then, select the best object which has the highest score</c>
<l>if (NumberOfDetectedObj &gt; 1)</l>
<l>    bestScore_index := 0</l>
<l>    bestScore := 0</l>
<l>    r_bestScore := 0</l>
<l>    c_bestScore := 0</l>
<l>    for i := 0 to NumberOfDetectedObj - 1 by 1</l>
<l>        if (Score[i] &gt; bestScore)</l>
<l>            bestScore_index := i</l>
<l>            bestScore := Score[i]</l>
<l>            r_bestScore := Row_ModelMatching[i]</l>
<l>            c_bestScore := Column_ModelMatching[i]</l>
<l>            angle_bestScore := Angle_ModelMatching[i] </l>
<l>        endif</l>
<l>    endfor</l>
<l>else</l>
<l>    bestScore := Score</l>
<l>    r_bestScore := Row_ModelMatching</l>
<l>    c_bestScore := Column_ModelMatching</l>
<l>    angle_bestScore := Angle_ModelMatching</l>
<l>endif</l>
<c></c>
<l>vector_angle_to_rigid (0, 0, 0, r_bestScore, c_bestScore, angle_bestScore, HomMat2D)  </l>
<l>affine_trans_contour_xld (ModelContours_Pinhole, ContoursAffineTrans, HomMat2D)    </l>
<l>gen_region_contour_xld (ContoursAffineTrans, ModelRegion, 'filled')</l>
<l>union1 (ModelRegion, RegionUnion)</l>
<l>fill_up(RegionUnion, RegionFillUp)</l>
<c></c>
<c>* Search for the region with maximum area as the pinhole region of defect image</c>
<l>connection (RegionFillUp, ConnectedRegions)</l>
<l>count_obj  (ConnectedRegions, obj_count)</l>
<l>area_max := 0</l>
<l>maximum_area_region_index := 1</l>
<l>for i := 1 to obj_count by 1</l>
<l>    select_obj  (ConnectedRegions, SelectedObj, i)</l>
<l>    area_center (SelectedObj, area, r, c)</l>
<l>    if (area &gt; area_max)</l>
<l>        maximum_area_region_index := i</l>
<l>        area_max := area</l>
<l>    endif</l>
<l>endfor</l>
<l>select_obj  (ConnectedRegions, SelectedObj_MaxArea, maximum_area_region_index)</l>
<l>gen_empty_region (BondingPadRegion_InputImage)</l>
<l>BondingPadRegion_InputImage := SelectedObj_MaxArea</l>
<c></c>
<l>* dev_display(InputImage)</l>
<l>* dev_set_draw('margin')</l>
<l>* dev_display(PinholeRegion_InputImage)</l>
<l>* stop()</l>
<l>* dev_display(RefImage)</l>
<l>* dev_set_draw('margin')</l>
<l>* dev_display(PinholeRegion_RefImage)</l>
<l>* stop()</l>
<c></c>
<c>********************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*** Procedure   : Extract defect search region within a bonding pad region.</c>
<c>***               1st Algorithm =&gt; Using edge extraction</c>
<c></c>
<l>smooth_image  (InputImage, InputImage_Smooth, 'deriche2', 0.8)</l>
<l>dilation_circle (BondingPadRegion_InputImage, RegionDilation, 5)</l>
<l>reduce_domain (InputImage_Smooth, RegionDilation, BondingPadImage_InputImage)</l>
<l>sobel_amp (BondingPadImage_InputImage, EdgeAmplitude_Pad1, 'thin_max_abs', 7)</l>
<l>sobel_amp (BondingPadImage_InputImage, EdgeAmplitude_Pad2, 'sum_abs',  9)</l>
<l>EdgeAmplitude_BondingPad := EdgeAmplitude_Pad1</l>
<l>threshold (EdgeAmplitude_BondingPad, EdgeRegion_BondingPad, 24, 255)</l>
<l>close_edges (EdgeRegion_BondingPad, EdgeAmplitude_BondingPad, EdgesExtendedRegion_BondingPad, 18)</l>
<c></c>
<c>* Create pinhole's frame region to remove pinhole's edge from edge image </c>
<l>OuterRegion := BondingPadRegion_InputImage</l>
<l>erosion_rectangle1 (OuterRegion, InnerRegion, 8, 8)</l>
<l>difference (OuterRegion, InnerRegion, FrameBondingPad_InputImage)</l>
<c></c>
<l>union2 (FrameBondingPad_InputImage, EdgesExtendedRegion_BondingPad, RegionUnion1)</l>
<l>area_center (BondingPadRegion_InputImage, BondingPadArea_InputImage, r, c)</l>
<l>fill_up_shape (RegionUnion1, RegionFillUp1, 'area', 1, 0.2*BondingPadArea_InputImage)</l>
<c></c>
<c>* Select diff region only the inside as defect region</c>
<l>difference (RegionFillUp1, FrameBondingPad_InputImage, RegionDiff)</l>
<l>erosion_rectangle1(InnerRegion, tmp, 3, 3)</l>
<l>intersection (tmp, RegionDiff, DefectRegion)</l>
<c></c>
<c>* Filter a small region in defect region as "noise" by using pixel area</c>
<l>erosion_rectangle1 (DefectRegion, ErosedDefectRegion, 1, 2)</l>
<l>connection (ErosedDefectRegion, ConnectedRegions)</l>
<l>count_obj  (ConnectedRegions, obj_count)</l>
<l>area_max := 0</l>
<l>for i := 1 to obj_count by 1</l>
<l>    select_obj  (ConnectedRegions, SelectedObj, i)</l>
<l>    area_center (SelectedObj, area, r, c)</l>
<l>    if (area &gt; area_max)</l>
<l>        area_max := area</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>SmallAreaRatio := 0.1</l>
<l>NoiseAreaThreshold := 20</l>
<l>RoundnessThreshold := 0.55</l>
<l>select_shape (ConnectedRegions,     FilteredDefectRegion, 'area', 'and', SmallAreaRatio*area_max, 99999)</l>
<l>select_shape (FilteredDefectRegion, FilteredDefectRegion, 'area', 'and', NoiseAreaThreshold,      99999)</l>
<l>select_shape (FilteredDefectRegion, FilteredDefectRegion, 'roundness', 'and', RoundnessThreshold, 1)</l>
<l>union1(FilteredDefectRegion, FilteredDefectRegion)</l>
<l>dilation_rectangle1 (FilteredDefectRegion, FilteredDefectRegion, 1, 2)</l>
<l>DefectRegion_Algorithm_EdgeExtraction := FilteredDefectRegion</l>
<c></c>
<l>dev_display(InputImage)</l>
<l>dev_set_draw('margin')</l>
<l>dev_display(DefectRegion_Algorithm_EdgeExtraction)</l>
<l>stop()</l>
<c></c>
<c>********************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*** Procedure   : Extract defect search region within a bonding pad region.</c>
<c>***               2nd Algorithm =&gt; Using gray-level thresholding method to find the defect</c>
<c></c>
<c>* Find the background level of bonding pad region using histogram value</c>
<l>smooth_image (InputImage, InputImage_Smooth, 'deriche2', 0.5)</l>
<l>reduce_domain (InputImage_Smooth, BondingPadRegion_InputImage, ImageReduced)</l>
<l>gray_histo (BondingPadRegion_InputImage, InputImage_Smooth, AbsoluteHisto, RelativeHisto)</l>
<c></c>
<c>* background gray-value should be the gray-value of pixel which has the most histogram number </c>
<l>backgroundGrayLevel := 1</l>
<l>MaxHisto := 0</l>
<l>for i := 1 to 255 by 1</l>
<l>    if(AbsoluteHisto[i] &gt; MaxHisto)</l>
<l>        MaxHisto := AbsoluteHisto[i]</l>
<l>        backgroundGrayLevel := i</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<c>* Thresholding to extract the dark-part (grey-level) defect</c>
<l>reduce_domain (InputImage, RegionDilation, BondingPadImage_InputImage)</l>
<l>hysteresis_threshold (BondingPadImage_InputImage, ThresholdRegion, backgroundGrayLevel - 48, backgroundGrayLevel - 45, 10)</l>
<l>closing_circle (ThresholdRegion, RegionClosing, 100)</l>
<l>difference (RegionClosing, ThresholdRegion, SearchRegion_Dark)</l>
<c></c>
<c>* Filtering small area in dark part</c>
<l>erosion_rectangle1 (SearchRegion_Dark, RegionErosion, 1, 2)</l>
<l>connection (RegionErosion, ConnectedRegions)</l>
<l>count_obj  (ConnectedRegions, obj_count)</l>
<l>area_max := 0</l>
<l>for i := 1 to obj_count by 1</l>
<l>    select_obj  (ConnectedRegions, SelectedObj, i)</l>
<l>    area_center (SelectedObj, area, r, c)</l>
<l>    if (area &gt; area_max)</l>
<l>        area_max := area</l>
<l>    endif</l>
<l>endfor</l>
<l>area_max_darkpart := area_max</l>
<l>select_shape (ConnectedRegions, FilteredSearchRegion_Dark, 'area', 'and', 0.1*area_max_darkpart, 99999)</l>
<l>select_shape (FilteredSearchRegion_Dark, FilteredSearchRegion_Dark, 'area', 'and', 10, 99999)</l>
<l>union1 (FilteredSearchRegion_Dark, FilteredSearchRegion_Dark)</l>
<l>dilation_rectangle1 (FilteredSearchRegion_Dark, FilteredSearchRegion_Dark, 1, 2)</l>
<c></c>
<c>* Thresholding to extract the bright-part (grey-level) defect</c>
<l>hysteresis_threshold (BondingPadImage_InputImage, ThresholdRegion, backgroundGrayLevel + 30, backgroundGrayLevel + 33, 10)</l>
<l>SearchRegion_Bright := ThresholdRegion</l>
<c></c>
<c>* Filtering small area in dark part</c>
<l>erosion_rectangle1 (SearchRegion_Bright, RegionErosion, 1, 2)</l>
<l>connection (RegionErosion, ConnectedRegions)</l>
<l>count_obj  (ConnectedRegions, obj_count)</l>
<l>area_max := 0</l>
<l>for i := 1 to obj_count by 1</l>
<l>    select_obj  (ConnectedRegions, SelectedObj, i)</l>
<l>    area_center (SelectedObj, area, r, c)</l>
<l>    if (area &gt; area_max)</l>
<l>        area_max := area</l>
<l>    endif</l>
<l>endfor</l>
<l>area_max_darkpart := area_max</l>
<l>select_shape (ConnectedRegions, FilteredSearchRegion_Bright, 'area', 'and', 0.1*area_max_darkpart, 99999)</l>
<l>select_shape (FilteredSearchRegion_Bright, FilteredSearchRegion_Bright, 'area', 'and', 10, 99999)</l>
<l>union1 (FilteredSearchRegion_Bright, FilteredSearchRegion_Bright)</l>
<l>dilation_rectangle1 (FilteredSearchRegion_Bright, FilteredSearchRegion_Bright, 1, 2)</l>
<c></c>
<c>* union between the resulted dark and bright part of defect region</c>
<l>union2 (FilteredSearchRegion_Dark, FilteredSearchRegion_Bright, DefectRegion_Algorithm_GrayLevelThreshold)</l>
<c></c>
<l>dev_display(InputImage)</l>
<l>dev_set_draw('margin')</l>
<l>dev_display(DefectRegion_Algorithm_GrayLevelThreshold)</l>
<l>* stop()</l>
<c></c>
<c>********************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*** Procedure   : Combine the resulted defect regions from both algorithm together</c>
<c></c>
<l>union2 (DefectRegion_Algorithm_EdgeExtraction, DefectRegion_Algorithm_GrayLevelThreshold, DefectRegion_Pinhole)</l>
<c>* filtering a small regions as noise</c>
<l>connection   (DefectRegion_Pinhole, ConnectedRegions)</l>
<l>area_center (ConnectedRegions, listArea, r, c)</l>
<l>tuple_max (listArea, MaxDefectArea)</l>
<l>MinDefectArea := 0.1*MaxDefectArea</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', MinDefectArea, 10000)</l>
<l>union1(SelectedRegions, FilteredDefectRegion_Pinhole)</l>
<c></c>
<c>********************************************************************************</c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*** Procedure : Display the result</c>
<l>message := 'Show the resulted defect region (pinhole)\n' + 'Yellow  = using edge extraction\n' + 'Green   = using gray-level thresholding'</l>
<l>dev_clear_window ()</l>
<l>dev_display(InputImage)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>disp_message (WindowHandle, message, 'window', 10, 10, 'black', 'true')</l>
<l>dev_set_draw('margin')</l>
<l>dev_set_color('yellow')</l>
<l>dev_display(DefectRegion_Algorithm_EdgeExtraction)</l>
<l>dev_set_color('green')</l>
<l>dev_display(DefectRegion_Algorithm_GrayLevelThreshold)</l>
<l>stop()</l>
<c></c>
<l>message := 'Show the resulted defect region (pinhole)\n' + 'Red  = resulted defect region (final)'</l>
<l>dev_clear_window ()</l>
<l>dev_display(InputImage)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>disp_message (WindowHandle, message, 'window', 10, 10, 'black', 'true')</l>
<l>dev_set_draw('margin')</l>
<l>dev_set_color('red')</l>
<l>dev_display(FilteredDefectRegion_Pinhole)</l>
<l>stop()</l>
<c>********************************************************************************</c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
